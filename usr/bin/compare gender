#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Name: Michael Omaye
# Directory ID: momaye (= the first part of your email)
# Date: 2018-09-10
# Assignment: Final Project

import pandas as pd
import matplotlib.pyplot as plt
project_df = pd.read_csv('U.S._Chronic_Disease_Indicators__CDI_new.csv', low_memory=False)  # Read the CSV file

firstcode_df = project_df                                                   # drop unnecessary columns
firstcode_df.iloc[:52, :12]   #extracted first 52 rows and first 12 columns to shorten the huge csv
firstcode_df = firstcode_df.iloc[:52, :12]

#setting the code for our first code equal to the original project dataframe indexed by state as shown above
first_df = firstcode_df
first_df
#firstcode_df.drop(['Guam', 'Puerto Rico'])
first_df = first_df.drop(first_df.index[10])  #removes guam and puerto rico
first_df = first_df.drop(first_df.index[38])
first_df

firstcode_df = first_df                         #return to original data frame
firstcode_df = firstcode_df.sort_values(by='LocationDesc')

#sets LocationDesc, the state names, as index
firstcode_df.set_index('LocationDesc', inplace=True)
firstcode_df

states_list = firstcode_df.index.values.tolist()
for v in states_list:
    print('{0}'.format(v))                      #created a dictionary of all the states for later use of order

secondcode_df = project_df.iloc[11670:12102]
secondcode_df = secondcode_df.sort_values('LocationDesc')
secondcode_df = secondcode_df.set_index('LocationDesc')
secondcode_df = secondcode_df.drop(['DataValueTypeID', 'QuestionID', 'GeoLocation', 'ResponseID', 'LocationID',
                                    'StratificationCategory2', 'Stratification2', 'StratificationCategory3',
                                    'Stratification3', 'DataSource', 'Response', 'TopicID', 'DataValueFootnoteSymbol',
                                    'LowConfidenceLimit', 'HighConfidenceLimit', 'DatavalueFootnote',
                                    'StratificationCategoryID2', 'StratificationID2','StratificationCategoryID3',
                                    'StratificationID3'], axis=1)

secondcode_df = secondcode_df.drop(['Virgin Islands', 'United States', 'Guam', 'Puerto Rico', 'District of Columbia'])
secondcode_df
overallasthma_df = secondcode_df[secondcode_df.StratificationID1 == 'OVR']
overallasthma_df

overallasthma_df = overallasthma_df[overallasthma_df.Topic == 'Asthma']
overallasthma_df


fasthma_df = secondcode_df[secondcode_df.StratificationID1 == 'GENF']
fasthma_df


masthma_df = secondcode_df[secondcode_df.StratificationID1 == 'GENM']
masthma_df


def compare_genderasthma():

    print('Select a state to see the male, female, and overall percent prevalence of asthma'
          'among adults in 2015.\nUse correct capitalization. '
          'Note: There is no comparison data for Alaska, Kansas, or '
          'Virginia.')
    one_state = []        # list for states that the user chooses

    while len(one_state) < 1:                              #increment through a loop
        asthma_state = input('Please enter a valid U.S. state: ')         # Select a State

        if asthma_state in states_list:    # Get the index of each state 
            if asthma_state == 'Kansas' or asthma_state == 'Alaska' or asthma_state == 'Virginia':  #set Conditions
                print('There is no numerical data to compare for this state.')
            else:
                one_state.append(asthma_state)
                print('Overall percent prevalence of asthma in ' + asthma_state + ': ' + str(
                    overallasthma_df.loc[asthma_state, 'DataValueAlt']))
                print('Male percent prevalence of asthma in ' + asthma_state + ': ' + str(
                    masthma_df.loc[asthma_state, 'DataValueAlt']))
                print('Female percent prevalence of asthma in ' + asthma_state + ': ' + str(
                    fasthma_df.loc[asthma_state, 'DataValueAlt']))
        else:
            print('What you have entered is not a valid state in the U.S. Please enter a valid state.')

    statedict = {'Female': fasthma_df.loc[asthma_state, 'DataValueAlt'],
                 'Male': masthma_df.loc[asthma_state, 'DataValueAlt'],
                 'Overall': overallasthma_df.loc[asthma_state, 'DataValueAlt']}
    plt.bar(range(len(statedict)), list(statedict.values()), align='center') #Begin to use pandas for ploting graph
    plt.xticks(range(len(statedict)), list(statedict.keys()))
    plt.show()                                                                  #show graph


compare_genderasthma()
